-- Obre els recursos per a treballar amb conjunts
-- https://leanprover-community.github.io/mathlib_docs/data/set/basic.html

import data.set.basic  
open set nat
-- open classical

-- Assumirem en tot l'exercici que 
-- Œ© √©s un tipus que far√† de contenidor
variables {I Œ© : Type}
-- a b c x y z seran elements de tipus Œ© 
variables a b c x y z : Œ©  
-- a b c x y z seran elements de tipus Œ© 
variables A B C X Y Z : set Œ©    
-- P √©s una proposici√≥ sobre elements de tipus Œ©
variable P : Œ© ‚Üí Prop 
-- fam√≠lies de conjunts de tipus Œ©
variable ùî∏ : I ‚Üí set Œ©
-- R S T relacions sobre Œ©
variables R S T : Œ© ‚Üí Œ© ‚Üí Prop  
-- funcions sobre elements de tipus Œ©
variables f g h : Œ© ‚Üí Œ©

-- En aquesta sessi√≥ treballarem amb aplicacions
-- https://leanprover-community.github.io/mathematics_in_lean/sets_functions_and_relations.html#functions

-- Definim les aplicacions constants
-- Œ∫  kappa 

def Œ∫ : Œ© ‚Üí (Œ© ‚Üí Œ©) := Œª (x:Œ©), Œª (z:Œ©), x

-- Œ∫ kappa √©s un operador que agafa una variable (z:Œ©)
-- i retorna una aplicaci√≥ Œ∫ x d'Œ© en Œ©, 
-- que a cada (z:Œ©), li fa correspondre, x

#check Œ∫
#check Œ∫ x

-- Les aplicacions constants s√≥n zeros a esquerra
theorem TConsZEsq : (Œ∫ x) ‚àò (Œ∫ y) = Œ∫ x :=
begin
  sorry,
end

-- En particular les aplicacions constants s√≥n idempotents
theorem TConsId : (Œ∫ x) ‚àò (Œ∫ x) = Œ∫ x :=
begin
  sorry,
end

-- La composici√≥ d'aplicacions constants amb 
-- qualsevol aplicaci√≥ retorna aplicacions constants

-- A esquerra
theorem TConsCompEsq : f ‚àò (Œ∫ x) = Œ∫ (f x) :=
begin
  sorry,
end

-- A dreta
theorem TConsCompD : (Œ∫ x) ‚àò f = Œ∫ x :=
begin
  sorry,
end