-- Obre els recursos per a treballar amb conjunts
-- https://leanprover-community.github.io/mathlib_docs/data/set/basic.html

import data.set.basic  
open set 
-- open classical

-- Assumirem en tot l'exercici que 
-- Œ© √©s un tipus que far√† de contenidor
variables {I Œ© : Type}
-- a b c x y z seran elements de tipus Œ© 
variables a b c x y z : Œ©  
-- a b c x y z seran elements de tipus Œ© 
variables X Y Z : set Œ©    
-- P √©s una proposici√≥ sobre elements de tipus Œ©
variable P : Œ© ‚Üí Prop 
-- fam√≠lies de conjunts de tipus Œ©
variable ùî∏ : I ‚Üí set Œ©
-- R S T relacions sobre Œ©
variables R S T : Œ© ‚Üí Œ© ‚Üí Prop  

----------------
----------------
----------------

-- Definim la relaci√≥ diagonal
-- Diagonal Œ© = {(x,y) ‚àà Œ© √ó Œ© ‚à£ x = y}
def Diagonal (Œ© : Type) : Œ© ‚Üí Œ© ‚Üí Prop := Œª x, Œª y, x = y

#check Diagonal 
#check Diagonal Œ©

-- La Diagonal √©s reflexiva
theorem TDiagRefl : reflexive (Diagonal Œ©) :=
begin
  sorry,
end

-- La Diagonal √©s sim√®trica
theorem TDiagSim : symmetric (Diagonal Œ©) :=
begin
  sorry,
end

-- La Diagonal √©s transitiva
theorem TDiagTrans : transitive (Diagonal Œ©) :=
begin
  sorry, 
end

-- La Diagonal √©s una relaci√≥ d'equival√®ncia
theorem TDiagEq : equivalence (Diagonal Œ©) :=
begin
  sorry,
end

----------------
----------------
----------------

-- Definim la relaci√≥ codiagonal
-- Codiagonal Œ© = {(x,y) ‚àà Œ© √ó Œ© ‚à£ x, y ‚àà Œ©}
def Codiagonal (Œ© : Type) : Œ© ‚Üí Œ© ‚Üí Prop := Œª x, Œª y, true

#check true.intro
#check Codiagonal 
#check Codiagonal Œ©

-- La Codiagonal √©s reflexiva
theorem TCoDiagRefl : reflexive (Codiagonal Œ©) :=
begin
  sorry,
end

-- La Codiagonal √©s sim√®trica
theorem TCoDiagSim : symmetric (Codiagonal Œ©) :=
begin
  sorry,
end

-- La Codiagonal √©s transitiva
theorem TCoDiagTrans : transitive (Codiagonal Œ©) :=
begin
  sorry,
end

-- La Codiagonal √©s una relaci√≥ d'equival√®ncia
theorem TCoDiagEq : equivalence (Codiagonal Œ©) :=
begin
  sorry,
end

----------------
----------------
----------------

-- Definim la relaci√≥ d'inclusi√≥ i d'igualtat entre relacions
def inclosa (R S: Œ© ‚Üí Œ© ‚Üí Prop) : Prop := ‚àÄ (x y : Œ©), R x y ‚Üí S x y
local infix ‚äÜ := inclosa
def igual (R S: Œ© ‚Üí Œ© ‚Üí Prop) : Prop := ‚àÄ (x y : Œ©), R x y ‚Üî S x y
local infix == := igual

#check R ‚äÜ S 
#check R == S 


-- La inclusi√≥ de relacions √©s reflexiva
theorem TIncRelRefl : R ‚äÜ R :=
begin
  sorry,
end

-- La inclusi√≥ de relacions √©s antisim√®trica
theorem TIncRelAntiSim (h1: R ‚äÜ S) (h2: S ‚äÜ R) : R == S :=
begin
  sorry,
end

-- La inclusi√≥ de relacions √©s transitiva
theorem TIncRelTrans (h1: R ‚äÜ S) (h2: S ‚äÜ T) : R ‚äÜ T :=
begin
  sorry,
end

-- La igualtat √©s reflexiva
theorem TEqRefl : R == R :=
begin
  sorry,
end

-- La igualtat √©s sim√®trica
theorem TEqSim (h1: R == S) : S == R :=
begin
  sorry,
end

-- La igualtat √©s transitiva
theorem TEqTrans (h1: R == S) (h2: S == T) : R == T :=
begin
  sorry,
end

-- Una relaci√≥ √©s reflexiva si, i nom√©s si, t√© a la Diagonal inclosa
theorem TReflDiag : reflexive R ‚Üî Diagonal Œ© ‚äÜ R :=
begin
  sorry,
end

-- Tota relaci√≥ est√† per davall de la Codiagonal
theorem TCoDiagMax : R ‚äÜ Codiagonal Œ© := 
begin
  sorry,
end

----------------
----------------
----------------

-- Definim la inversa d'una relaci√≥
def inv (R: Œ© ‚Üí Œ© ‚Üí Prop) : Œ© ‚Üí Œ© ‚Üí Prop := Œª (x y : Œ©), R y x

-- La inversa de la inversa d'una relaci√≥ √©s la mateixa relaci√≥
theorem TInvInv : inv (inv R) == R :=
begin
  sorry,
end

-- Una relaci√≥ √©s sim√®trica si, i nom√©s si, t√© la seua inversa inclosa
theorem TSimInv : symmetric R ‚Üî (inv R) ‚äÜ R :=
begin
  sorry,
end

----------------
----------------
----------------

-- Definim la composici√≥ de relacions
def comp (R S: Œ© ‚Üí Œ© ‚Üí Prop) : Œ© ‚Üí Œ© ‚Üí Prop := Œª x, Œª y, ‚àÉ (z : Œ©), R x z ‚àß S z y
local infix ‚àò := comp 
-- ‚àò comp

#check R ‚àò S

-- La composici√≥ de relacions √©s associativa
theorem TCompAss : R ‚àò (S ‚àò T) == (R ‚àò S) ‚àò T :=
begin
  sorry,
end

-- La diagonal fa de neutre a esquerra per a la composici√≥
theorem TDiagNeutEsq : R ‚àò (Diagonal Œ©) == R :=
begin
  sorry, 
end 

-- La diagonal fa de neutre a dreta per a la composici√≥
theorem TDiagNeutDrt : (Diagonal Œ©) ‚àò R == R :=
begin
  sorry,
end 

-- Una relaci√≥ √©s transitiva si, i nom√©s si, t√© el seu quadrat incl√≥s
theorem TTransComp : transitive R ‚Üî R ‚àò R ‚äÜ R :=
begin
  sorry,
end
