-- Obre els recursos per a treballar amb conjunts
-- https://leanprover-community.github.io/mathlib_docs/data/set/basic.html

import data.set.basic  
open set nat
-- open classical

-- Assumirem en tot l'exercici que 
-- Œ© √©s un tipus que far√† de contenidor
variables {I Œ© : Type}
-- a b c x y z seran elements de tipus Œ© 
variables a b c x y z : Œ©  
-- a b c x y z seran elements de tipus Œ© 
variables A B C X Y Z : set Œ©    
-- P √©s una proposici√≥ sobre elements de tipus Œ©
variable P : Œ© ‚Üí Prop 
-- fam√≠lies de conjunts de tipus Œ©
variable ùî∏ : I ‚Üí set Œ©
-- R S T relacions sobre Œ©
variables R S T : Œ© ‚Üí Œ© ‚Üí Prop  
-- funcions sobre elements de tipus Œ©
variables f g h : Œ© ‚Üí Œ©

-- En aquesta sessi√≥ treballarem amb aplicacions
-- https://leanprover-community.github.io/mathematics_in_lean/sets_functions_and_relations.html#functions

#check f 
#check x
#check f x 

#check funext

-- Dues aplicacions s√≥n iguals si, i nom√©s si, 
-- sobre els mateixos elements retornen les mateixes imatges
lemma L1 : f = g ‚Üî ‚àÄ(x:Œ©), f x = g x :=
begin
  split,
  assume h1,
  intro x,
  have h2 : f x = f x, from eq.refl (f x),
  exact eq.subst h1 h2,
  --
  exact funext,
end

-- Resultat an√†leg per a relacions
lemma L1b : R = S ‚Üî ‚àÄ(x y : Œ©), R x y = S x y :=
begin
  split,
  assume h1,
  intros x y,
  have h2: R x y = R x y, from eq.refl (R x y),
  exact eq.subst h1 h2,
  --
  intro h1,
  funext x,
  funext y,
  exact h1 x y, 
end

-- Composici√≥ d'aplicacions
-- ‚àò comp
#check f ‚àò g 

#print function.comp
#check refl

theorem TDefComp : ‚àÄ(x:Œ©), (f ‚àò g) x = f (g x):=
begin
  intro x,
  refl,
end

#print function.comp.assoc
#print refl
-- La composici√≥ d'aplicacions √©s associativa
theorem TCompAss : f ‚àò (g ‚àò h) = (f ‚àò g) ‚àò h :=
begin
  refl,
end

-- Aplicaci√≥ identitat
#check id
#print id
#check (id : Œ© ‚Üí Œ©) 
#check f ‚àò id 

#print function.comp.right_id
-- La composici√≥ d'aplicacions t√© a id com a neutre a dreta
theorem TCompNeutDreta : f ‚àò id = f :=
begin
  refl,
end

#print function.comp.left_id
-- La composici√≥ d'aplicacions t√© a id com a neutre a esquerra
theorem TCompNeutEsq : id ‚àò f = f :=
begin
  refl,
end

-- La identitat √©s idempotent
theorem TIdIdem : (id : Œ© ‚Üí Œ©) ‚àò (id : Œ© ‚Üí Œ©) = (id : Œ© ‚Üí Œ©) :=
begin
  refl,
end

-- Definici√≥ de l'aplicaci√≥ identitat
-- Amb notaci√≥ de c√†lcul lambda
-- https://en.wikipedia.org/wiki/Lambda_calculus
def idOmega (Œ© : Type) : Œ© ‚Üí Œ© := Œª (x:Œ©), x
#check idOmega 

-- La nova aplicaci√≥ identitat √©s idempotent
-- Notem que cal especificar el tipus
theorem TidOmegaIdem  : (idOmega Œ© ‚àò idOmega Œ©) = idOmega Œ© :=
begin
  refl,
end

-- Aplicaci√≥ identitat sobre naturals
def idnat : ‚Ñï ‚Üí ‚Ñï := Œª (n : ‚Ñï), n
#check idnat

-- La nova aplicaci√≥ identitat √©s idempotent
-- Notem que no cal especificar tipus
theorem TidnatIdem  : (idnat ‚àò idnat) = idnat :=
begin
  refl,
end

-- Es presenten les seg√ºents aplicacions entre naturals
-- Aquesta part √©s prospectiva
-- M√©s avant entrarem a estudiar amb m√©s detall els naturals
def t1 : ‚Ñï ‚Üí ‚Ñï := Œª (n : ‚Ñï), n + 5
#check t1

theorem Taux1 : t1 3 = 8 :=
begin
  refl,
end

def t2 : ‚Ñï ‚Üí ‚Ñï := Œª (n : ‚Ñï), n - 5
#check t2

theorem Taux2 : t2 3 = 0 :=
begin
  refl,
end

#check nat.one_ne_zero
theorem TAux : t1 ‚àò t2 ‚â† id :=
begin
  assume h1,
  have h2 : (t1 ‚àò t2) 3 = 5, by refl,
  have h3 : id 3 = 3, by refl,
  have h4: 3 = 5, 
  exact (calc 
    3 = id 3 : h3
    ... = (t1 ‚àò t2) 3 : by rw h1
    ... = 5 : h2
  ),
  have h5: 3 - 4 = 0, by refl,
  have h6: 5 - 4 = 1, by refl,
  have h7: ‚àÄ (n: ‚Ñï), 3 - n = 3 - n, 
  intro n, exact eq.refl (3 - n),
  have h8: ‚àÄ (n: ‚Ñï), 3 - n = 5 - n, 
  intro n, exact eq.subst h4 (h7 n),
  have h9: 3 - 4 = 5 - 4, exact (h8 4),
  have h10: 0 = 1, 
  exact (calc 
    0 = 3 - 4  : by rw h5
    ... = 5 - 4  : h9
    ... = 1 : h6
  ),
  have h11: 1 ‚â† 0, from nat.one_ne_zero,
  have h12: 1 = 0, from eq.symm h10,
  exact h11 h12,
end

-- Demostraci√≥ alternativa de TAux
#check nat.add_right_cancel
theorem TAux2 : t1 ‚àò t2 ‚â† id :=
begin
  assume h1,
  have h2 : (t1 ‚àò t2) 3 = 5, by refl,
  have h3 : id 3 = 3, by refl,
  have h4: 3 = 5, 
  exact (calc 
    3 = id 3 : h3
    ... = (t1 ‚àò t2) 3 : by rw h1
    ... = 5 : h2
  ),
  have h5: 0 + 3 = 3, by refl,
  have h6: 2 + 3 = 5, by refl,
  have h7: 0 + 3 = 2 + 3, 
  exact (calc
    0 + 3 = 3 : h5
    ... = 5 : h4
    ... = 2 + 3 : by rw h6
  ),
  have h8: 0 = 2, exact nat.add_right_cancel h7,
  have h9: 0 = 1, 
  exact (calc
    0 = 0 - 1 : by refl
    ... = 2 - 1 : by rw h8
    ... = 1 : by refl
  ),
  have h10: 1 ‚â† 0, from nat.one_ne_zero,
  have h11: 1 = 0, from eq.symm h9,
  exact h10 h11,
end

-- Exemple de definici√≥ per casos
def t3 : ‚Ñ§ ‚Üí ‚Ñ§ := Œª (z:‚Ñ§), if z < 4 then 4 else 5
#check t3 









