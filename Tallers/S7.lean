-- Obre els recursos per a treballar amb conjunts
-- https://leanprover-community.github.io/mathlib_docs/data/set/basic.html

import data.set.basic data.set.function
open set 
-- open classical

-- Assumirem en tot l'exercici que 
-- Œ© √©s un tipus que far√† de contenidor
variables {I Œ© Œì: Type}
-- a b c x y z seran elements de tipus Œ© 
variables a b c x y z : Œ©  
-- a b c x y z seran elements de tipus Œ© 
variables A B C X Y Z : set Œ©    
-- P √©s una proposici√≥ sobre elements de tipus Œ©
variable P : Œ© ‚Üí Prop 
-- fam√≠lies de conjunts de tipus Œ©
variable ùî∏ : I ‚Üí set Œ©
-- R S T relacions sobre Œ©
variables R S T : Œ© ‚Üí Œ© ‚Üí Prop  

-- En aquesta sessi√≥ treballarem amb quocients
-- https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients
-- https://xenaproject.wordpress.com/maths-in-lean-quotients-and-equivalence-classes/

-- Quot agafa relacions i torna un nou tipus
#check quot 

-- Per a R relaci√≥
-- R: Œ© ‚Üí Œ© ‚Üí Prop
#check quot R 

-- Formaci√≥ de classes
#check quot.mk
-- Si x √©s un objecte de tipus Œ©
-- x : Œ©
-- La seua classe en quot R ve donada per 
-- Lean ent√©n la m√≠nima relaci√≥ d'equival√®ncia generada per R
#check quot.mk R x 

#check eqv_gen R 
#print eqv_gen 

-- Quot.ind √©s un axioma que ens diu que si una proposici√≥ Œ≤
-- es demostra per a tot element de la forma classe 
-- d'un element, aleshores la proposici√≥ √©s certa per a tot
-- objecte del tipus quot 
#check quot.ind
/- Esta √©s la definici√≥
axiom quot.ind :
  ‚àÄ {Œ± : Sort u} {r : Œ± ‚Üí Œ± ‚Üí Prop} {Œ≤ : quot r ‚Üí Prop},
    (‚àÄ a, Œ≤ (quot.mk r a)) ‚Üí ‚àÄ (q : quot r), Œ≤ q
-/

-- Donada una aplicaci√≥ f : Œ± ‚Üí Œ≤ i una demostraci√≥
-- de que si tots els elements a b : Œ± que estiguen
-- R-relacionats satisfan que f a = f b, aleshores
-- existeix una aplicaci√≥ del quocient en Œ≤
-- √âs la forma de comprovar que l'aplicaci√≥ est√† ben definida
#check quot.lift
/- Esta √©s la definici√≥
constant quot.lift :
  Œ† {Œ± : Sort u} {r : Œ± ‚Üí Œ± ‚Üí Prop} {Œ≤ : Sort u} (f : Œ± ‚Üí Œ≤),
    (‚àÄ a b, r a b ‚Üí f a = f b) ‚Üí quot r ‚Üí Œ≤
-/

#check quot.eqv_gen_sound
#check eqv_gen.rel x y 

theorem TClassR (R : Œ© ‚Üí Œ© ‚Üí Prop) (x y : Œ©) (h1: R x y) : quot.mk R x = quot.mk R y :=
begin
  have h2: eqv_gen R x y, exact eqv_gen.rel x y h1,
  exact quot.eqv_gen_sound h2,
end 

theorem TREqv (R: Œ© ‚Üí Œ© ‚Üí Prop) (h1: equivalence R) : eqv_gen R = R :=
begin
  have t1: reflexive R, exact and.elim_left h1,
  have t2: symmetric R, exact and.elim_left (and.elim_right h1),
  have t3: transitive R, exact and.elim_right (and.elim_right h1),
  funext x y,
  have h2: eqv_gen R x y ‚Üî R x y,
  split,
  --
  assume h3,
  /-
  A continuaci√≥ anem a fer la primera demostraci√≥ per inducci√≥
  Notem que h3 ens diu que x i y estan relacionats per a eqv_gen R
  Com eqv_gen √©s un operador inductiu, podr√≠em fer cassos sobre h3
  per√≤ a√ß√≤ comen√ßaria a obrir-nos cassos indefinidament. 
  En compte de fer cassos, fem inducci√≥
  Aleshores, cada vegada que el cas ens done com a hip√≤tesi algun estament
  de la forma eqv_gen R x y, ens inclour√† tamb√© el que volem demostrar com a 
  hip√≤tesi (el pas inductiu)
  -/
  induction h3 with c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15,
  exact c3,
  exact t1 c4,
  exact t2 c8,
  exact t3 c14 c15,
  --
  assume h3,
  exact eqv_gen.rel x y h3,
  --
  exact (calc 
  eqv_gen R x y = R x y : by rw h2
  ),
end

theorem TREqv2 (R: Œ© ‚Üí Œ© ‚Üí Prop) (h1: equivalence R) (x y : Œ©) : quot.mk R x = quot.mk R y ‚Üî R x y :=
begin
  split,
  -- Primera implicaci√≥
  assume h2,
  have h3: eqv_gen R x y, exact iff.elim_left quot.eq h2,
  have h4: eqv_gen R = R, exact (TREqv R) h1,
  exact eq.subst h4 h3,
  -- Segona implicaci√≥
  assume h2,
  have h3: eqv_gen R x y, exact eqv_gen.rel x y h2,
  exact iff.elim_right quot.eq h3,
end  


